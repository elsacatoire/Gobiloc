{
	"info": {
		"_postman_id": "5585f8d7-b9cd-45e8-bb18-32f4e85c5faa",
		"name": "GobiLocAPI",
		"description": "JWT signed with base64 encoding\n\nThis folder creates a signed JWT using the `jwt_secret` variable and encodes the JWT data as base64. It then sets the signed and encoded JWT as `Bearer` token in the `Authorization` header.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9ae487f-a2a0-428e-89bf-0082bfe1b455",
								"exec": [
									"// JWT generation script adapted from\r",
									"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d\r",
									"\r",
									"var jwtSecret = pm.environment.get('jwt_secret') || ''\r",
									"\r",
									"// Set headers for JWT\r",
									"var header = {\r",
									"\t'typ': 'JWT',\r",
									"\t'alg': 'HS256'\r",
									"};\r",
									"\r",
									"// Prepare timestamp in seconds\r",
									"var currentTimestamp = Math.floor(Date.now() / 1000)\r",
									"\r",
									"var data = {\r",
									"\t'iss': pm.environment.get('jwt_iss') || '',\r",
									"\t'ist': pm.environment.get('jwt_ist') || '',\r",
									"\t'iat': currentTimestamp,\r",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation\r",
									"\t'jti': 'jwt_nonce'\r",
									"}\r",
									"\r",
									"\r",
									"function base64url(source) {\r",
									"    // Encode in classical base64\r",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)\r",
									"    \r",
									"    // Remove padding equal characters\r",
									"    encodedSource = encodedSource.replace(/=+$/, '')\r",
									"    \r",
									"    // Replace characters according to base64url specifications\r",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')\r",
									"    encodedSource = encodedSource.replace(/\\//g, '_')\r",
									"    \r",
									"    return encodedSource\r",
									"}\r",
									"\r",
									"// encode header\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))\r",
									"var encodedHeader = base64url(stringifiedHeader)\r",
									"\r",
									"// encode data\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))\r",
									"var encodedData = base64url(stringifiedData)\r",
									"\r",
									"// build token\r",
									"var token = `${encodedHeader}.${encodedData}`\r",
									"\r",
									"// sign token\r",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)\r",
									"signature = base64url(signature)\r",
									"var signedToken = `${token}.${signature}`\r",
									"\r",
									"pm.environment.set('jwt_signed', signedToken)\r",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "09c39f4d-42f3-4a33-ad91-0e3504737217",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"password\": \"poissjghj\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8000/api/token/"
					},
					"response": []
				},
				{
					"name": "Logout user",
					"id": "fdc2a028-e167-40d2-b56e-cc4a6bd55e38",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzI1MTgxMTk2LCJpYXQiOjE3MjUxNzc1OTYsImp0aSI6ImYwMDk0YTdjZjM0YjRiOTBhODFiMTYyMzgyODBmZDc3IiwidXNlcl9pZCI6MX0.1ZvduyQkmGzi{{bearerToken}}MuqOgiS1wcFnJQZ7lRAQncfG5pURv0"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "5c1p5Oql8EzUzjnWhkZD7rAKYgPqCwMn",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8000/api/user/logout/"
					},
					"response": []
				},
				{
					"name": "Resgister",
					"id": "f06c96fa-0356-426e-a8d0-6952660e60d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"kkkkkk\",\r\n\t\"email\": \"whatwhkkkkt@test.com\",\r\n\t\"password\": \"123coucou\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8000/api/user/"
					},
					"response": []
				},
				{
					"name": "Change user name",
					"id": "2257b246-fa30-413c-8653-48f13f878407",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "PGsnkouNyliqzCWcmzNt7AqTeW3ydmmW",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"Patrick\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8000/api/user/1/"
					},
					"response": []
				},
				{
					"name": "Get authenticated user's data",
					"id": "687527c2-155e-4e00-8588-c9307ba29036",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzI1MTgxMTk2LCJpYXQiOjE3MjUxNzc1OTYsImp0aSI6ImYwMDk0YTdjZjM0YjRiOTBhODFiMTYyMzgyODBmZDc3IiwidXNlcl9pZCI6MX0.1ZvduyQkmGziWMuqOgiS1wcFnJQZ7lRAQncfG5pURv0"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "YrtKKn20nbQIhhAp2CUh59Cos2jpoFgq",
								"type": "text",
								"disabled": true
							}
						],
						"url": "localhost:8000/api/user/"
					},
					"response": []
				},
				{
					"name": "Get a user's data with id",
					"id": "b190b79f-1775-4eea-8085-734f7a5d12d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-CSRFToken",
								"value": "MtItFlS1l9B2wXf7QB9zLfyBRXn9yM2d",
								"type": "text"
							}
						],
						"url": "localhost:8000/api/user/8/"
					},
					"response": []
				}
			],
			"id": "4b2c03ff-ca66-46c6-88d4-e8e6a0b9007d",
			"description": "### Authentication Collection Description\n\nThis authentication collection contains endpoints for managing user authentication in the GobiLoc project. The collection is designed to work with a backend built using Django REST Framework and a PostgreSQL database.\n\n#### Key Features:\n\n- User Registration: Create new user accounts\n    \n- User Login: Authenticate existing users\n    \n- Username Reset: Allow users to reset their usernames// TODO\n    \n- Password Reset: Allow users to reset their passwords // TODO\n    \n- Token Refresh: Extend session tokens for long-term access\n    \n\n#### Endpoints:\n\nUrl : /api/\n\n1. **Register User**\n    \n    - POST /auth/register // TO CHECK\n        \n    - Create a new user account with email, password, and other required fields\n        \n2. **Login User**\n    \n    - POST /token/\n        \n    - Authenticate an existing user and receive a token\n        \n3. **Refresh Token**\n    \n    - POST /token/refresh\n        \n    - Exchange an expired token for a new one\n        \n\n/// TODO ??\n\n1. **Reset Password**\n    \n    - POST /auth/password/reset\n        \n    - Initiate password reset process\n        \n    - Follow-up PUT request to /auth/password/reset/{uid}/{token} to complete reset\n        \n2. **Verify Email**\n    \n    - POST /auth/email/verify\n        \n    - Send verification email to newly registered users\n        \n3. **Resend Verification Email**\n    \n    - POST /auth/email/resend\n        \n    - Resend email verification to users who haven't confirmed their accounts\n        \n\n#### Best Practices:\n\n- Use HTTPS for all requests to ensure secure communication\n    \n- Include appropriate headers (e.g., Content-Type, Authorization)\n    \n- Handle errors gracefully and provide meaningful error messages\n    \n- Implement rate limiting to prevent abuse\n    \n- Use JWT (JSON Web Tokens) for authentication and session management\n    \n\nThis collection provides a comprehensive set of endpoints for handling user authentication in the GobiLoc project, integrating seamlessly with the React frontend and Django REST Framework backend.",
			"auth": {
				"type": "bearer",
				"bearer": {}
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9caef6ae-045f-4911-92e6-4ec8f4ecef0f",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "43a60e2a-e74d-42da-a633-f88022899dd8",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Lists",
			"item": [
				{
					"name": "TODO",
					"item": [
						{
							"name": "category",
							"item": [
								{
									"name": "Get a category",
									"id": "2872e77d-4681-4fb0-a1c6-a6b84bf74641",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"coucou\": \"1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "localhost:8000/api/todo/1/"
									},
									"response": []
								}
							],
							"id": "7a6ed0cf-e80d-4abf-be2b-63c96095c2ea"
						},
						{
							"name": "Create todo",
							"id": "92f9595f-c8d2-42b1-a978-a4c095e3c00f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "csrftoken",
										"value": "Cvmsozea6wX3WX8pUsec1CuDHm5HYmYq",
										"disabled": true
									},
									{
										"key": "sessionid",
										"value": "pk4vkolulilmwd0dv449rv0761b48bc4",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n        \"flat_share\": 6,\r\n        \"name\": \"meluch\",\r\n        \"category\": 2\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:8000/api/todo/"
							},
							"response": []
						},
						{
							"name": "Edit list name",
							"id": "e97e5f07-63a4-4c27-ba6f-217f04f1c08f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "csrftoken",
										"value": "Cvmsozea6wX3WX8pUsec1CuDHm5HYmYq",
										"disabled": true
									},
									{
										"key": "sessionid",
										"value": "pk4vkolulilmwd0dv449rv0761b48bc4",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\r\n        \"name\": \"LFI\",\r\n        \"category\": null\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:8000/api/todo/204/"
							},
							"response": []
						},
						{
							"name": "Get all todos from a flat",
							"id": "97e3f8c8-ec72-494e-90c8-8381a3dfb899",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"coucou\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:8000/api/todo/flat/1/"
							},
							"response": []
						},
						{
							"name": "Get a todo",
							"id": "33455f5c-6540-4c29-9efa-f8c266298ad4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"coucou\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:8000/api/todo/1/"
							},
							"response": []
						},
						{
							"name": "Get a todos from a flat with tasks",
							"id": "3198788e-ad5c-402a-88b9-89c0a866b355",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"coucou\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:8000/api/todo/1/tasks/"
							},
							"response": []
						},
						{
							"name": "delete a todo",
							"id": "e73ec607-ad4f-4401-9f44-3dab98cd6921",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:8000/api/todo/204/"
							},
							"response": []
						}
					],
					"id": "b047a278-5f16-4a89-af21-0c22498a147c"
				},
				{
					"name": "TASKS",
					"item": [
						{
							"name": "Create a task",
							"id": "ac1bf2fc-2607-4207-a8c7-788490756386",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"todo\": 1,\r\n    \"content\": \"du vin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:8000/api/task/"
							},
							"response": []
						},
						{
							"name": "Get a task",
							"id": "0337cfa5-9f5c-4b97-a915-3dbd568ff5d3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "localhost:8000/api/task/1"
							},
							"response": []
						},
						{
							"name": "Delete a task",
							"id": "c36f9ef1-e834-4222-8259-461d0688177d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "localhost:8000/api/task/4/"
							},
							"response": []
						},
						{
							"name": "Get all tasks from a todo",
							"id": "c22ddf7f-13e6-46fd-8e70-303542b23b26",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": "localhost:8000/api/todo/1/tasks"
							},
							"response": []
						},
						{
							"name": "Check/uncheck a task",
							"id": "14119b20-5741-4d17-b6ec-e12a5b1a8180",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"done\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "localhost:8000/api/task/1/"
							},
							"response": []
						}
					],
					"id": "337987cf-128d-4e68-a212-5ece11ceeb72"
				}
			],
			"id": "5929d83e-676c-4942-980d-9adb75372c63"
		},
		{
			"name": "Flat",
			"item": [
				{
					"name": "Create a flat",
					"id": "48dee1db-667f-4424-ae01-365e639e6361",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Le front populaire\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8000/api/flat/"
					},
					"response": []
				},
				{
					"name": "Get a flat",
					"id": "53c519c1-62f9-4bfa-9224-483382c35226",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "localhost:8000/api/flat/8/"
					},
					"response": []
				},
				{
					"name": "Edit a flat",
					"id": "dabe146b-5854-4e87-a9fa-88423db6a782",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"sous les pavés la plage\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8000/api/flat/9/"
					},
					"response": []
				},
				{
					"name": "Delete a flat",
					"id": "de671878-0f4f-4418-b98a-35d6edb06910",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "localhost:8000/api/flat/8/"
					},
					"response": []
				}
			],
			"id": "60cf8855-214f-4f25-9e2a-70a104715d68"
		},
		{
			"name": "Enpoints tests",
			"item": [
				{
					"name": "Lists",
					"item": [
						{
							"name": "TODO",
							"item": [
								{
									"name": "category",
									"item": [],
									"id": "06ea2d65-3ba7-4d68-ae02-bac85c369f3e"
								},
								{
									"name": "Get all todos from a flat",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71f31104-ec69-42af-bd65-c6efdf6deec3",
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Todos array structure is valid\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.todos).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
													"    \r",
													"    responseData.todos.forEach(function(todo) {\r",
													"        pm.expect(todo).to.have.property('id').that.is.a('number');\r",
													"        pm.expect(todo).to.have.property('flat_share_id').that.is.a('number');\r",
													"        pm.expect(todo).to.have.property('name').that.is.a('string');\r",
													"        pm.expect(todo).to.have.property('updateDate').that.is.a('string');\r",
													"        pm.expect(todo.category_id).to.satisfy(function(value) {\r",
													"        return typeof value === 'number' || value === null;\r",
													"    });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "dd5e76dd-1f44-455c-930a-7cb835376364",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"coucou\": \"1\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "localhost:8000/api/todo/flat/1/"
									},
									"response": []
								},
								{
									"name": "Get a todo",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1545bd7a-e40a-4b89-aedc-026bba7e550e",
												"exec": [
													"pm.test(\"Response status code is 200\", function () {\r",
													"  pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response schema for id, flat_share, name, category, and tasks\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.flat_share).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
													"    pm.expect(responseData.category).to.exist.and.to.be.a('number');\r",
													"    pm.expect(responseData.tasks).to.exist.and.to.be.an('array');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Each task in the tasks array has id, todo, content, and done fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData.tasks).to.be.an('array');\r",
													"    responseData.tasks.forEach(function(task) {\r",
													"        pm.expect(task).to.have.property('id');\r",
													"        pm.expect(task).to.have.property('todo');\r",
													"        pm.expect(task).to.have.property('content');\r",
													"        pm.expect(task).to.have.property('done');\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f035d2df-e48b-4c43-938b-43e5584e3ed1",
												"exec": [],
												"type": "text/javascript"
											}
										}
									],
									"id": "10f86eec-b4af-4ec6-9fdc-22273ca125f5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "localhost:8000/api/todo/1/"
									},
									"response": []
								},
								{
									"name": "Create todo",
									"id": "a75617ab-dbbe-4515-8ef0-2cac9d331547",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "csrftoken",
												"value": "Cvmsozea6wX3WX8pUsec1CuDHm5HYmYq",
												"disabled": true
											},
											{
												"key": "sessionid",
												"value": "pk4vkolulilmwd0dv449rv0761b48bc4",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    {\r\n        \"flat_share\": 6,\r\n        \"name\": \"meluch\",\r\n        \"category\": 2\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "localhost:8000/api/todo/"
									},
									"response": []
								},
								{
									"name": "Edit list name",
									"id": "86c34043-6dc2-4b84-a0ec-f957f0ac7aea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "csrftoken",
												"value": "Cvmsozea6wX3WX8pUsec1CuDHm5HYmYq",
												"disabled": true
											},
											{
												"key": "sessionid",
												"value": "pk4vkolulilmwd0dv449rv0761b48bc4",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    {\r\n        \"name\": \"LFI\",\r\n        \"category\": null\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "localhost:8000/api/todo/204/"
									},
									"response": []
								},
								{
									"name": "delete a todo",
									"id": "34797322-4052-4bfb-999b-387629dcde6d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "localhost:8000/api/todo/204/"
									},
									"response": []
								}
							],
							"id": "c2827065-8f9e-499f-9a01-d08dcbe80236"
						},
						{
							"name": "TASKS",
							"item": [
								{
									"name": "Create a task",
									"id": "89c002d2-3309-40b8-b800-e8f3cc29fd65",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"todo\": 1,\r\n    \"content\": \"du vin\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "localhost:8000/api/task/"
									},
									"response": []
								},
								{
									"name": "Get a task",
									"id": "8c9ffd09-4720-4392-9bac-9e77ec59c195",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "localhost:8000/api/task/1"
									},
									"response": []
								},
								{
									"name": "Delete a task",
									"id": "7a1967a5-c96d-4174-a341-6fd35ab0fd7e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [],
										"url": "localhost:8000/api/task/4/"
									},
									"response": []
								},
								{
									"name": "Get all tasks from a todo",
									"id": "c2de95cd-910f-4de7-89a5-a83660393dfc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": "localhost:8000/api/todo/1/tasks"
									},
									"response": []
								},
								{
									"name": "Check/uncheck a task",
									"id": "14f95d8e-ab36-4eb4-bf33-2f0e79700a19",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"done\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "localhost:8000/api/task/1/"
									},
									"response": []
								}
							],
							"id": "5dd5fbb0-7891-40a1-b0cc-dbdd854948f1"
						}
					],
					"id": "a82e7a8d-5ac7-45e4-8f9c-211d70fbaa71"
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e6928ee-4799-4958-b2a5-20aad0145c79",
								"exec": [
									"// Read the response\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Create the variable\r",
									"pm.collectionVariables.set(\"bearerToken\", responseData.access);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields - refresh and access\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('refresh');\r",
									"  pm.expect(responseData).to.have.property('access');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Refresh and access are non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.refresh).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh should not be empty\");\r",
									"  pm.expect(responseData.access).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fabc22b5-1d23-46ea-8927-8832df28f427",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"password\": \"poissjghj\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "localhost:8000/api/token/"
					},
					"response": []
				}
			],
			"id": "cef905aa-387c-4619-a30d-6249e12f4dee",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4d2116e1-6f6e-4c56-889d-461c68163438",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ddf40221-1db4-4984-baa9-0e3173369548",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{bearerToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "02a8fde1-13f4-412e-9065-997a945f979b",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3a5b2cdf-8e5e-423e-bc06-a6e8ba54c767",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bearerToken",
			"value": "to be set by login"
		}
	]
}